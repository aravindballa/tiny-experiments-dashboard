import { db } from '../db';
import { ExperimentWithUpdates, ExportData } from '../types';
import { getAllExperiments, getProgressUpdates, createExperiment, addProgressUpdate } from './experimentService';

// Export all data to JSON format
export const exportData = async (): Promise<ExportData> => {
  try {
    // Get all experiments
    const experiments = await getAllExperiments();
    
    // For each experiment, get its progress updates
    const experimentsWithUpdates: ExperimentWithUpdates[] = await Promise.all(
      experiments.map(async (experiment) => {
        const progressUpdates = await getProgressUpdates(experiment.id);
        return {
          ...experiment,
          progress_updates: progressUpdates,
        };
      })
    );

    return { experiments: experimentsWithUpdates };
  } catch (error) {
    console.error('Error exporting data:', error);
    throw error;
  }
};

// Import data from JSON format
export const importData = async (data: ExportData): Promise<{ success: boolean; message: string }> => {
  // Start a transaction
  try {
    await db.query('BEGIN');

    // Check for duplicate experiment names
    const existingExperiments = await getAllExperiments();
    const existingNames = new Set(existingExperiments.map(e => e.name));
    
    const duplicates = data.experiments
      .filter(e => existingNames.has(e.name))
      .map(e => e.name);
    
    if (duplicates.length > 0) {
      await db.query('ROLLBACK');
      return {
        success: false,
        message: `Import failed: Duplicate experiment names found: ${duplicates.join(', ')}`
      };
    }

    // Import each experiment and its progress updates
    for (const experimentWithUpdates of data.experiments) {
      const { progress_updates, ...experimentData } = experimentWithUpdates;
      
      // Remove id, created_at, and updated_at as they will be generated by the database
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { id, created_at, updated_at, ...newExperiment } = experimentData;
      
      // Create the experiment
      const createdExperiment = await createExperiment(newExperiment);
      
      // Add progress updates
      for (const update of progress_updates) {
        await addProgressUpdate(createdExperiment.id, update.update_text);
      }
    }

    await db.query('COMMIT');
    return {
      success: true,
      message: `Successfully imported ${data.experiments.length} experiments.`
    };
  } catch (error) {
    // Rollback on error
    try {
      await db.query('ROLLBACK');
    } catch (rollbackError) {
      console.error('Error rolling back transaction:', rollbackError);
    }
    
    console.error('Error importing data:', error);
    return {
      success: false,
      message: `Import failed: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Download exported data as a JSON file
export const downloadExportedData = async (): Promise<void> => {
  try {
    const data = await exportData();
    const jsonString = JSON.stringify(data, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `experiments_export_${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Error downloading exported data:', error);
    throw error;
  }
};
